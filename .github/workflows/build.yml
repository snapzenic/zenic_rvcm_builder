name: Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4.7.1
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.json
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

      - name: Build modules/APKs
        run: if [ -f "config.json" ]; then ./build.sh config.json; else ./build.sh config.toml; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Get date
        id: get_date
        run: |
          echo "date=$(TZ=Europe/Istanbul date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@2.11.2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: "ðŸ“¦ ReVanced Build - ${{ steps.get_date.outputs.date }}"
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v6.0.1
        with:
          branch: update
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Send Telegram notificatiob
    env:
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      RELEASE_DATE: ${{ steps.get_date.outputs.date }}
    if: env.TG_TOKEN != null
    run: |
      cd build || { echo "build folder not found"; exit 1; }

      TG_CHAT="@zenicgithubreminder"
      NL=$'\n'

      escape_markdown_v2() {
        echo "$1" | sed 's/[][(){}!#+\-.=_>|~`]/\\&/g'
      }

      APKS=""
      MODULES=""
      for OUTPUT in *; do
        DL_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
        SAFE_OUTPUT=$(escape_markdown_v2 "$OUTPUT")
        SAFE_URL=$(escape_markdown_v2 "$DL_URL")
        if [[ $OUTPUT = *.apk ]]; then
          APKS+="${NL}ðŸ“¦ [${SAFE_OUTPUT}](${DL_URL})"
        elif [[ $OUTPUT = *.zip ]]; then
          MODULES+="${NL}ðŸ“¦ [${SAFE_OUTPUT}](${DL_URL})"
        fi
      done
      MODULES=${MODULES#"$NL"}
      APKS=${APKS#"$NL"}

      # Convert to MarkdownV2
      BODY="$(sed \
        -e 's/^\* \*\*/â€¢ */g' \
        -e 's/^\* `/â€¢ `/g' \
        -e 's/\*\*/\*/g' \
        -e 's/`/\\`/g' \
        -e 's/^\* /â€¢ /g' \
        -e 's/^- /â€¢ /g' \
        -e 's/\[/\\[/g' \
        -e 's/\]/\\]/g' \
        -e 's/(/\\(/g' \
        -e 's/)/\\)/g' \
        -e 's/\./\\./g' \
        -e '/^==/d' \
        ../build.md)"

      SAFE_DATE=$(escape_markdown_v2 "$RELEASE_DATE")

      MSG="ðŸ†™ *New Zenic ReVanced Build*\n\`${SAFE_DATE}\`\n\n${BODY}\n\n*ðŸ“¥ Download Links:*\n\nðŸ“¦ *Modules:*\n${MODULES}\n\nðŸ“± *APKs:*\n${APKS}"

      echo "'$MSG'"
      MSG=${MSG:0:3900}  # Telegram limit safety (MarkdownV2 Ã¼st sÄ±nÄ±rÄ± 4096)

      curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
        -d chat_id="${TG_CHAT}" \
        -d parse_mode="MarkdownV2" \
        -d disable_web_page_preview=true \
        -d text="$MSG"
